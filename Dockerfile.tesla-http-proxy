# Define the Git hash as a build argument
ARG GIT_HASH=b00b1c09e05a35b6019eb98d7c8bc62cc0cb6424

# Build stage
FROM golang:1.24 AS builder

# Set the working directory inside the container
WORKDIR /app

# Clone the repository, check out the specific commit, and build the binary
RUN git clone https://github.com/teslamotors/vehicle-command.git && \
    cd /app/vehicle-command/cmd/tesla-http-proxy && \
    git checkout ${GIT_HASH} && \
    CGO_ENABLED=0 GOOS=linux go build -a -ldflags '-extldflags "-static"' -o /app/tesla-http-proxy

# Run stage
FROM gcr.io/distroless/static-debian12 AS runner

# Set the working directory inside the container
WORKDIR /app

# Copy the self-signed certificate into the container
COPY certs /app/certs

# Copy the built binary and certificates (if present) from the builder stage
COPY --from=builder /app/tesla-http-proxy /app/tesla-http-proxy

# Expose the port for the application
EXPOSE 4443

# Run the application
CMD ["/app/tesla-http-proxy", "-tls-key", "/app/certs/tls-key.pem", "-cert", "/app/certs/tls-cert.pem", "-port", "4443", "-key-file", "/app/certs/private-key.pem", "-host", "0.0.0.0", "-verbose"]
